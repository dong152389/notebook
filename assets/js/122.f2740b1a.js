(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{1134:function(e,s,t){"use strict";t.r(s);var a=t(26),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"配置网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置网络"}},[e._v("#")]),e._v(" 配置网络")]),e._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[e._v("容器网络是容器选择连接到其他容器、主机和外部网络的机制。容器的 runtime 提供了各种网络模式，每种模式都会产生不同的体验。例如，Docker 默认情况下可以为容器配置以下网络：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("none：")]),e._v(" 将容器添加到一个容器专门的网络堆栈中，没有对外连接。")]),e._v(" "),a("li",[a("strong",[e._v("host：")]),e._v(" 将容器添加到主机的网络堆栈中，没有隔离。")]),e._v(" "),a("li",[a("strong",[e._v("default bridge：")]),e._v(" 默认网络模式。每个容器可以通过 IP 地址相互连接。")]),e._v(" "),a("li",[a("strong",[e._v("自定义网桥：")]),e._v(" 用户定义的网桥，具有更多的灵活性、隔离性和其他便利功能。")])]),e._v(" "),a("h2",{attrs:{id:"什么是-cni"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-cni"}},[e._v("#")]),e._v(" 什么是 CNI")]),e._v(" "),a("p",[e._v("CNI(Container Network Interface) 是一个标准的，通用的接口。在容器平台，Docker，Kubernetes，Mesos 容器网络解决方案 flannel，calico，weave。只要提供一个标准的接口，就能为同样满足该协议的所有容器平台提供网络功能，而 CNI 正是这样的一个标准接口协议。")]),e._v(" "),a("h2",{attrs:{id:"kubernetes-中的-cni-插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-中的-cni-插件"}},[e._v("#")]),e._v(" Kubernetes 中的 CNI 插件")]),e._v(" "),a("p",[e._v("CNI 的初衷是创建一个框架，用于在配置或销毁容器时动态配置适当的网络配置和资源。插件负责为接口配置和管理 IP 地址，并且通常提供与 IP 管理、每个容器的 IP 分配、以及多主机连接相关的功能。容器运行时会调用网络插件，从而在容器启动时分配 IP 地址并配置网络，并在删除容器时再次调用它以清理这些资源。")]),e._v(" "),a("p",[e._v("运行时或协调器决定了容器应该加入哪个网络以及它需要调用哪个插件。然后，插件会将接口添加到容器网络命名空间中，作为一个 veth 对的一侧。接着，它会在主机上进行更改，包括将 veth 的其他部分连接到网桥。再之后，它会通过调用单独的 IPAM（IP地址管理）插件来分配 IP 地址并设置路由。")]),e._v(" "),a("p",[e._v("在 Kubernetes 中，kubelet 可以在适当的时间调用它找到的插件，为通过 kubelet 启动的 pod进行自动的网络配置。")]),e._v(" "),a("p",[e._v("Kubernetes 中可选的 CNI 插件如下：")]),e._v(" "),a("ul",[a("li",[e._v("Flannel")]),e._v(" "),a("li",[e._v("Calico")]),e._v(" "),a("li",[e._v("Canal")]),e._v(" "),a("li",[e._v("Weave")])]),e._v(" "),a("h2",{attrs:{id:"什么是-calico"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-calico"}},[e._v("#")]),e._v(" 什么是 Calico")]),e._v(" "),a("p",[e._v("Calico 为容器和虚拟机提供了安全的网络连接解决方案，并经过了大规模生产验证（在公有云和跨数千个集群节点中），可与 Kubernetes，OpenShift，Docker，Mesos，DC / OS 和 OpenStack 集成。")]),e._v(" "),a("p",[e._v("Calico 还提供网络安全规则的动态实施。使用 Calico 的简单策略语言，您可以实现对容器，虚拟机工作负载和裸机主机端点之间通信的细粒度控制。")]),e._v(" "),a("h2",{attrs:{id:"安装网络插件-calico"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装网络插件-calico"}},[e._v("#")]),e._v(" 安装网络插件 Calico")]),e._v(" "),a("blockquote",[a("p",[e._v("注意：截止到文章发表日期 2019 年 05 月 11 日，Calico 官方版本为 3.7")])]),e._v(" "),a("p",[e._v("参考官方文档安装：https://docs.projectcalico.org/v3.7/getting-started/kubernetes/")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 在 Master 节点操作即可")]),e._v("\nkubectl apply -f https://docs.projectcalico.org/v3.7/manifests/calico.yaml\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 安装时显示如下输出")]),e._v("\nconfigmap/calico-config created\ncustomresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created\ncustomresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org created\ncustomresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org created\ncustomresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org created\ncustomresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org created\ncustomresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org created\ncustomresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created\ncustomresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created\ncustomresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created\ncustomresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created\ncustomresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created\ncustomresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created\ncustomresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created\ncustomresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created\nclusterrole.rbac.authorization.k8s.io/calico-kube-controllers created\nclusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created\nclusterrole.rbac.authorization.k8s.io/calico-node created\nclusterrolebinding.rbac.authorization.k8s.io/calico-node created\ndaemonset.extensions/calico-node created\nserviceaccount/calico-node created\ndeployment.extensions/calico-kube-controllers created\nserviceaccount/calico-kube-controllers created\n")])])]),a("p",[e._v("确认安装是否成功")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("watch")]),e._v(" kubectl get pods --all-namespaces\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 需要等待所有状态为 Running，注意时间可能较久，3 - 5 分钟的样子")]),e._v("\nEvery "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(".0s: kubectl get pods --all-namespaces                                                                                                    kubernetes-master: Fri May "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("18")]),e._v(":16:51 "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2019")]),e._v("\n\nNAMESPACE     NAME                                        READY   STATUS    RESTARTS   AGE\nkube-system   calico-kube-controllers-8646dd497f-g2lln    "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("/1     Running   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("          50m\nkube-system   calico-node-8jrtp                           "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("/1     Running   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("          50m\nkube-system   coredns-8686dcc4fd-mhwfn                    "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("/1     Running   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("          51m\nkube-system   coredns-8686dcc4fd-xsxwk                    "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("/1     Running   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("          51m\nkube-system   etcd-kubernetes-master                      "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("/1     Running   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("          50m\nkube-system   kube-apiserver-kubernetes-master            "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("/1     Running   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("          51m\nkube-system   kube-controller-manager-kubernetes-master   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("/1     Running   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("          51m\nkube-system   kube-proxy-p8mdw                            "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("/1     Running   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("          51m\nkube-system   kube-scheduler-kubernetes-master            "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("/1     Running   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("          51m\n")])])]),a("p",[e._v("至此基本环境已部署完毕。")]),e._v(" "),a("h2",{attrs:{id:"解决-imagepullbackoff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决-imagepullbackoff"}},[e._v("#")]),e._v(" 解决 ImagePullBackOff")]),e._v(" "),a("p",[e._v("在使用 "),a("code",[e._v("watch kubectl get pods --all-namespaces")]),e._v(" 命令观察 Pods 状态时如果出现 "),a("code",[e._v("ImagePullBackOff")]),e._v(" 无法 Running 的情况，请尝试使用如下步骤处理：")]),e._v(" "),a("ul",[a("li",[e._v("Master 中删除 Nodes："),a("code",[e._v("kubectl delete nodes <NAME>")])]),e._v(" "),a("li",[e._v("Slave 中重置配置："),a("code",[e._v("kubeadm reset")])]),e._v(" "),a("li",[e._v("Slave 重启计算机："),a("code",[e._v("reboot")])]),e._v(" "),a("li",[e._v("Slave 重新加入集群："),a("code",[e._v("kubeadm join")])])]),e._v(" "),a("h2",{attrs:{id:"附-配置固定-ip-和-dns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附-配置固定-ip-和-dns"}},[e._v("#")]),e._v(" 附：配置固定 IP 和 DNS")]),e._v(" "),a("p",[e._v("当关机后再启动虚拟机有时 IP 地址会自动更换，导致之前的配置不可用；配置完 Kubernetes 网络后虚拟机还会出现无法联网的情况，后经研究发现是 DNS 会被自动重写所致，Ubuntu Server 18.04 LTS 版本的 IP 和 DNS 配置也与之前的版本配置大相径庭，故在此说明下如何修改 IP 和 DNS")]),e._v(" "),a("h3",{attrs:{id:"修改固定-ip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改固定-ip"}},[e._v("#")]),e._v(" 修改固定 IP")]),e._v(" "),a("p",[e._v("编辑 "),a("code",[e._v("vi /etc/netplan/50-cloud-init.yaml")]),e._v(" 配置文件，注意这里的配置文件名未必和你机器上的相同，请根据实际情况修改。修改内容如下：")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("network")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ethernets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ens33")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("addresses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("192.168.141.134/24"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("gateway4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 192.168.141.2\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("nameservers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("addresses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("192.168.141.2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n")])])]),a("p",[e._v("使配置生效 "),a("code",[e._v("netplan apply")])]),e._v(" "),a("h3",{attrs:{id:"修改-dns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改-dns"}},[e._v("#")]),e._v(" 修改 DNS")]),e._v(" "),a("h4",{attrs:{id:"方法一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法一"}},[e._v("#")]),e._v(" 方法一")]),e._v(" "),a("ul",[a("li",[e._v("停止 "),a("code",[e._v("systemd-resolved")]),e._v(" 服务："),a("code",[e._v("systemctl stop systemd-resolved")])]),e._v(" "),a("li",[e._v("修改 DNS："),a("code",[e._v("vi /etc/resolv.conf")]),e._v("，将 "),a("code",[e._v("nameserver")]),e._v(" 修改为如 "),a("code",[e._v("114.114.114.114")]),e._v(" 可以正常使用的 DNS 地址")])]),e._v(" "),a("h4",{attrs:{id:"方法二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法二"}},[e._v("#")]),e._v(" 方法二")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vi")]),e._v(" /etc/systemd/resolved.conf\n")])])]),a("p",[e._v("把 DNS 取消注释，添加 DNS，保存退出，重启即可")]),e._v(" "),a("p",[a("img",{attrs:{src:t(737),alt:"img"}})])])}),[],!1,null,null,null);s.default=n.exports},737:function(e,s,t){e.exports=t.p+"assets/img/Lusifer_20190602201826.b4242049.png"}}]);