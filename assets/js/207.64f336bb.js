(window.webpackJsonp=window.webpackJsonp||[]).push([[207],{773:function(e,n,s){"use strict";s.r(n);var r=s(26),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"第一个-spring-应用程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一个-spring-应用程序"}},[e._v("#")]),e._v(" 第一个 Spring 应用程序")]),e._v(" "),s("h2",{attrs:{id:"pom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pom"}},[e._v("#")]),e._v(" POM")]),e._v(" "),s("p",[e._v("创建一个工程名为 "),s("code",[e._v("hello-spring")]),e._v(" 的项目，"),s("code",[e._v("pom.xml")]),e._v(" 文件如下：")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.funtl</groupId>\n    <artifactId>hello-spring</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>4.3.17.RELEASE</version>\n        </dependency>\n    </dependencies>\n</project>\n')])])]),s("p",[e._v("主要增加了 "),s("code",[e._v("org.springframework:spring-context")]),e._v(" 依赖")]),e._v(" "),s("h2",{attrs:{id:"创建接口与实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建接口与实现"}},[e._v("#")]),e._v(" 创建接口与实现")]),e._v(" "),s("h3",{attrs:{id:"创建-userservice-接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-userservice-接口"}},[e._v("#")]),e._v(" 创建 "),s("code",[e._v("UserService")]),e._v(" 接口")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("package com.funtl.hello.spring.service;\n\npublic interface UserService {\n    public void sayHi();\n}\n")])])]),s("h3",{attrs:{id:"创建-userserviceimpl-实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-userserviceimpl-实现"}},[e._v("#")]),e._v(" 创建 "),s("code",[e._v("UserServiceImpl")]),e._v(" 实现")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('package com.funtl.hello.spring.service.impl;\n\nimport com.funtl.hello.spring.service.UserService;\n\npublic class UserServiceImpl implements UserService {\n    public void sayHi() {\n        System.out.println("Hello Spring");\n    }\n}\n')])])]),s("h2",{attrs:{id:"创建-spring-配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-spring-配置文件"}},[e._v("#")]),e._v(" 创建 Spring 配置文件")]),e._v(" "),s("p",[e._v("在 "),s("code",[e._v("src/main/resources")]),e._v(" 目录下创建 "),s("code",[e._v("spring-context.xml")]),e._v(" 配置文件，从现在开始类的实例化工作交给 Spring 容器管理（IoC），配置文件如下：")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="\n       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n\n    <bean id="userService" class="com.funtl.hello.spring.service.impl.UserServiceImpl" />\n</beans>\n')])])]),s("ul",[s("li",[s("code",[e._v("<bean />")]),e._v("：用于定义一个实例对象。一个实例对应一个 bean 元素。")]),e._v(" "),s("li",[s("code",[e._v("id")]),e._v("：该属性是 Bean 实例的唯一标识，程序通过 id 属性访问 Bean，Bean 与 Bean 间的依赖关系也是通过 id 属性关联的。")]),e._v(" "),s("li",[s("code",[e._v("class")]),e._v("：指定该 Bean 所属的类，注意这里只能是类，不能是接口。")])]),e._v(" "),s("h2",{attrs:{id:"测试-spring-ioc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试-spring-ioc"}},[e._v("#")]),e._v(" 测试 Spring IoC")]),e._v(" "),s("p",[e._v("创建一个 "),s("code",[e._v("MyTest")]),e._v(" 测试类，测试对象是否能够通过 Spring 来创建，代码如下：")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('package com.funtl.hello.spring;\n\nimport com.funtl.hello.spring.service.UserService;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MyTest {\n\n    public static void main(String[] args) {\n        // 获取 Spring 容器\n        ApplicationContext applicationContext = new ClassPathXmlApplicationContext("spring-context.xml");\n        \n        // 从 Spring 容器中获取对象\n        UserService userService = (UserService) applicationContext.getBean("userService");\n        userService.sayHi();\n    }\n}\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);